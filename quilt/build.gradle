architectury {
	platformSetupLoomIde()
	loader("quilt")
}

configurations {
	common
	shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
	compileClasspath.extendsFrom common
	runtimeClasspath.extendsFrom common
	developmentFabric.extendsFrom common
}

dependencies {
	modImplementation "org.quiltmc:quilt-loader:${rootProject.quilt_loader_version}"
	mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

	common(project(path: ":common", configuration: "namedElements")) { transitive false }
	shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
}

processResources {
	inputs.property "group", rootProject.maven_group
	inputs.property "version", rootProject.version

	filesMatching("quilt.mod.json") {
		expand "group": rootProject.maven_group,
				"version": rootProject.version
	}
}

shadowJar {
	configurations = [project.configurations.shadowCommon]
	archiveClassifier = "dev-shadow"
}

remapJar {
	injectAccessWidener = true
	inputFile.set(shadowJar.archiveFile)
	dependsOn shadowJar
	archiveClassifier = null
}

jar {
	archiveClassifier.set("fabric")
}

sourcesJar {
	def commonSources = project(":common").sourcesJar
	dependsOn commonSources
	from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
	withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
		skip()
	}
}