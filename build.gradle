plugins {
    id 'dev.architectury.loom' version '1.10-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
}

tasks.register('updateVersion') {
    doLast {
        int auto_update_version = 0
        String version_filename = rootProject.version_filename

        if (file(version_filename).exists()) {
            auto_update_version = file(version_filename).text.trim() as Integer

            gradle.addListener(new BuildListener() {
                @Override
                void buildFinished(BuildResult result) {
                    if (!result.failure) {
                        new File(projectDir, version_filename).text = auto_update_version + 1 as String

                        println "Yoooo project build ${auto_update_version} just dropped"
                    }
                }

                @Override void settingsEvaluated(Settings settings) {}
                @Override void projectsLoaded(Gradle gradle) {}
                @Override void projectsEvaluated(Gradle gradle) {}
            })
        }
        else new File(projectDir, version_filename).text = auto_update_version as String
    }
}

def modVersion = "1.0.${file(rootProject.version_filename).text.trim()}+${rootProject.minecraft_version}"

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = modVersion
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    apply plugin: 'com.gradleup.shadow'

    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'Forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'NeoForge'
            url = 'https://maven.neoforged.net/releases'
        }
        maven {
            name = 'Quilt'
            url = 'https://maven.quiltmc.org/repository/release'
        }
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.layered {
            it.mappings("net.fabricmc:yarn:$rootProject.yarn_mappings:v2")
            it.mappings("dev.architectury:yarn-mappings-patch-neoforge:$rootProject.yarn_mappings_patch_neoforge_version")
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.toVersion(Integer.parseInt(rootProject.java_version))
        targetCompatibility = JavaVersion.toVersion(Integer.parseInt(rootProject.java_version))

        toolchain {
            languageVersion = JavaLanguageVersion.of(Integer.parseInt(rootProject.java_version))
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = Integer.parseInt(rootProject.java_version)
    }
}