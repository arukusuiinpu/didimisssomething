plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
}

int auto_update_version = 0
String version_filename = project.version_filename

if (file(version_filename).exists()) {
	auto_update_version = file(version_filename).text.trim() as Integer

	gradle.addListener(new BuildListener() {
		@Override
		void buildFinished(BuildResult result) {
			if (!result.failure) {
				new File(projectDir, version_filename).text = auto_update_version + 1 as String

				println "Yoooo project build ${auto_update_version} just dropped"
			}
		}

		@Override void settingsEvaluated(Settings settings) {}
		@Override void projectsLoaded(Gradle gradle) {}
		@Override void projectsEvaluated(Gradle gradle) {}
	})
}
else new File(projectDir, version_filename).text = auto_update_version as String

version = "1.0.${file(version_filename).text.trim()}+${project.minecraft_version}"
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {

}

loom {

}

dependencies {
	minecraft "net.minecraft:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	implementation "net.minidev:json-smart:${project.json_smart_version}"
	implementation "net.minidev:accessors-smart:${project.json_smart_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	duplicatesStrategy(DuplicatesStrategy.INCLUDE)

	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
	from {
		configurations.runtimeClasspath.findAll { it.name.contains('json-smart') }.collect { it.isDirectory() ? it : zipTree(it) }
	}
	from {
		configurations.runtimeClasspath.findAll { it.name.contains('accessors-smart') }.collect { it.isDirectory() ? it : zipTree(it) }
	}
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}

publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	repositories {

	}
}